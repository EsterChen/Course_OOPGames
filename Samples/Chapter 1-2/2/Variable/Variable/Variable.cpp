// Variable.cpp : Defines the entry point for the application.
//
/************************************************************************/
/*	程序目的：C语言各种变量的使用
	程序功能：打字母游戏。玩家有3条生命。屏幕不断出现随机的字母要求玩家尽快正确输入。
		如果输入正确，得1分，否则减一条生命。当生命为0时，结束游戏，给出玩家的平均打字速度。
	待读者改进:修改输出文字的大小，并要求用户在规定时间内完成每个字母的输入，否则减少生命
	编写者：韩红雷（hanhonglei@sina.com）*/
/************************************************************************/

#include "stdafx.h"
#include "Variable.h"

#define MAX_LOADSTRING 100

// Global Variables:
HINSTANCE hInst;								// current instance
TCHAR szTitle[MAX_LOADSTRING];					// The title bar text
TCHAR szWindowClass[MAX_LOADSTRING];			// the main window class name
// 全局变量
COLORREF color = RGB(255, 0, 0);				// 文字颜色为红色
int health = 3;									// 玩家生命点数
int score = 0;									// 玩家得分
unsigned long times = 0;						// 游戏运行时间
char c;											// 待输入的字母
WCHAR str[64];									// 输出字符串，使用扩展的字符存储方式，可以用于国际化文字存储中
char hit;										// 当前用户的按键字母

// Forward declarations of functions included in this code module:
ATOM				MyRegisterClass(HINSTANCE hInstance);
BOOL				InitInstance(HINSTANCE, int);
LRESULT CALLBACK	WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK	About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY _tWinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPTSTR    lpCmdLine,
                     int       nCmdShow)
{
	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);

 	// TODO: Place code here.
	c = 'A'+rand()%26;			// 随机生成一个新的待输入字母
	times = GetTickCount();		// 得到程序启动时的时间（毫秒）

	MSG msg;
	HACCEL hAccelTable;

	// Initialize global strings
	LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
	LoadString(hInstance, IDC_VARIABLE, szWindowClass, MAX_LOADSTRING);
	MyRegisterClass(hInstance);

	// Perform application initialization:
	if (!InitInstance (hInstance, nCmdShow))
	{
		return FALSE;
	}

	hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_VARIABLE));
	// Main message loop:
	while (GetMessage(&msg, NULL, 0, 0))
	{
		if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}

	return (int) msg.wParam;
}



//
//  FUNCTION: MyRegisterClass()
//
//  PURPOSE: Registers the window class.
//
//  COMMENTS:
//
//    This function and its usage are only necessary if you want this code
//    to be compatible with Win32 systems prior to the 'RegisterClassEx'
//    function that was added to Windows 95. It is important to call this function
//    so that the application will get 'well formed' small icons associated
//    with it.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEX wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style			= CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc	= WndProc;
	wcex.cbClsExtra		= 0;
	wcex.cbWndExtra		= 0;
	wcex.hInstance		= hInstance;
	wcex.hIcon			= LoadIcon(hInstance, MAKEINTRESOURCE(IDI_VARIABLE));
	wcex.hCursor		= LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground	= (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName	= MAKEINTRESOURCE(IDC_VARIABLE);
	wcex.lpszClassName	= szWindowClass;
	wcex.hIconSm		= LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

	return RegisterClassEx(&wcex);
}

//
//   FUNCTION: InitInstance(HINSTANCE, int)
//
//   PURPOSE: Saves instance handle and creates main window
//
//   COMMENTS:
//
//        In this function, we save the instance handle in a global variable and
//        create and display the main program window.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   HWND hWnd;

   hInst = hInstance; // Store instance handle in our global variable

   hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}

//
//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  PURPOSE:  Processes messages for the main window.
//
//  WM_COMMAND	- process the application menu
//  WM_PAINT	- Paint the main window
//  WM_DESTROY	- post a quit message and return
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	int wmId, wmEvent;
	PAINTSTRUCT ps;
	HDC hdc;
	switch (message)
	{
	case WM_COMMAND:
		wmId    = LOWORD(wParam);
		wmEvent = HIWORD(wParam);
		// Parse the menu selections:
		switch (wmId)
		{
		case IDM_ABOUT:
			DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
			break;
		case IDM_EXIT:
			DestroyWindow(hWnd);
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
		}
		break;
	case WM_LBUTTONDOWN:					// 鼠标左键按下消息
		color = RGB(255, 0, 0);				// 将字体颜色变换为红色
		InvalidateRect(hWnd, NULL, TRUE);	// 发出重绘消息
		break; 
	case WM_RBUTTONDOWN:					// 鼠标右键按下消息
		color = RGB(0, 0, 255);				// 将字体颜色变换为蓝色
		InvalidateRect(hWnd, NULL, TRUE);	// 发出重绘消息
		break; 
	case WM_KEYDOWN:						// 键盘按下消息
		if (health <= 0)					// 如果生命点耗尽,则不处理键盘消息
			break;
		 hit = wParam;						// 得到当前用户的按键
		 if (hit == c)						// 如果是正确的按键
		 {
			 c = 'A'+ rand()%26;			// 随机生成一个新的待输入字母
			 score = score + 1;				// 得分加1
		 }
		 else								// 否则,减少生命点
		 {
			health = health - 1;
			if (health <= 0)				// 如果生命点耗尽,则计算总耗时
				times = GetTickCount() - times;
		 }
		 InvalidateRect(hWnd, NULL, TRUE);	// 重绘屏幕
		break; 
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		// TODO: Add any drawing code here...
		SetTextColor(hdc, color);			// 设定文字颜色
		TextOut(hdc, 0, 0, L"请输入正确的字母!", 9);
		swprintf(str, L"生命数：%d", health);	// 将待输出的信息格式化存储到字符串中
		TextOut(hdc, 200, 0, str, wcslen(str));	// 输出游戏信息

		swprintf(str, L"得分：%d", score);	// 将待输出的信息格式化存储到字符串中
		TextOut(hdc, 400, 0, str, wcslen(str));	// 输出游戏信息

		if (health <= 0)					// 游戏结束信息
		{
			swprintf(str, L"游戏结束,打字速度: %.2f 个每秒", float(score*1000)/times);
		}
		else
			swprintf(str, L"%c", c);		// 当前待输入的字符
		TextOut(hdc, 20, 40, str, wcslen(str));

		EndPaint(hWnd, &ps);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}

// Message handler for about box.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	UNREFERENCED_PARAMETER(lParam);
	switch (message)
	{
	case WM_INITDIALOG:
		return (INT_PTR)TRUE;

	case WM_COMMAND:
		if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
		{
			EndDialog(hDlg, LOWORD(wParam));
			return (INT_PTR)TRUE;
		}
		break;
	}
	return (INT_PTR)FALSE;
}
